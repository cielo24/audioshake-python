# coding: utf-8

"""
    Groovy API

    AudioShake API  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'request_id': 'str',
        'stem_id': 'str',
        'client_id': 'str',
        'license_id': 'str',
        'stem_metadata': 'object',
        'callback_url': 'str',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'request_id': 'requestId',
        'stem_id': 'stemId',
        'client_id': 'clientId',
        'license_id': 'licenseId',
        'stem_metadata': 'stemMetadata',
        'callback_url': 'callbackUrl',
        'status': 'status'
    }

    def __init__(self, id=None, request_id=None, stem_id=None, client_id=None, license_id=None, stem_metadata=None, callback_url=None, status=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._request_id = None
        self._stem_id = None
        self._client_id = None
        self._license_id = None
        self._stem_metadata = None
        self._callback_url = None
        self._status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.request_id = request_id
        self.stem_id = stem_id
        self.client_id = client_id
        if license_id is not None:
            self.license_id = license_id
        self.stem_metadata = stem_metadata
        self.callback_url = callback_url
        self.status = status

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def request_id(self):
        """Gets the request_id of this Job.  # noqa: E501

        The request id.  # noqa: E501

        :return: The request_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Job.

        The request id.  # noqa: E501

        :param request_id: The request_id of this Job.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def stem_id(self):
        """Gets the stem_id of this Job.  # noqa: E501

        The stem id.  # noqa: E501

        :return: The stem_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._stem_id

    @stem_id.setter
    def stem_id(self, stem_id):
        """Sets the stem_id of this Job.

        The stem id.  # noqa: E501

        :param stem_id: The stem_id of this Job.  # noqa: E501
        :type: str
        """
        if stem_id is None:
            raise ValueError("Invalid value for `stem_id`, must not be `None`")  # noqa: E501

        self._stem_id = stem_id

    @property
    def client_id(self):
        """Gets the client_id of this Job.  # noqa: E501

        The client id.  # noqa: E501

        :return: The client_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Job.

        The client id.  # noqa: E501

        :param client_id: The client_id of this Job.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def license_id(self):
        """Gets the license_id of this Job.  # noqa: E501

        The license id.  # noqa: E501

        :return: The license_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this Job.

        The license id.  # noqa: E501

        :param license_id: The license_id of this Job.  # noqa: E501
        :type: str
        """

        self._license_id = license_id

    @property
    def stem_metadata(self):
        """Gets the stem_metadata of this Job.  # noqa: E501

        Metadata associated with a stem.  # noqa: E501

        :return: The stem_metadata of this Job.  # noqa: E501
        :rtype: object
        """
        return self._stem_metadata

    @stem_metadata.setter
    def stem_metadata(self, stem_metadata):
        """Sets the stem_metadata of this Job.

        Metadata associated with a stem.  # noqa: E501

        :param stem_metadata: The stem_metadata of this Job.  # noqa: E501
        :type: object
        """
        if stem_metadata is None:
            raise ValueError("Invalid value for `stem_metadata`, must not be `None`")  # noqa: E501

        self._stem_metadata = stem_metadata

    @property
    def callback_url(self):
        """Gets the callback_url of this Job.  # noqa: E501

        Url to call back to client.  # noqa: E501

        :return: The callback_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Job.

        Url to call back to client.  # noqa: E501

        :param callback_url: The callback_url of this Job.  # noqa: E501
        :type: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["created", "processing", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
