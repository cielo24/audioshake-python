# coding: utf-8

"""
    Groovy API

    AudioShake API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2XXJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_id': 'str',
        'created_at': 'str',
        'started_at': 'str',
        'updated_at': 'str',
        'request_id': 'str',
        'license_id': 'str',
        'stem_metadata': 'InlineResponse2XXJobStemMetadata',
        'metadata': 'InlineResponse2XXJobStemMetadata',
        'callback_url': 'str',
        'status': 'str',
        'status_info': 'InlineResponse2XXJobStatusInfo',
        'source_asset': 'InlineResponse2XXJobSourceAsset',
        'stem_assets': 'list[InlineResponse2XXJobStemAssets]',
        'output_assets': 'list[InlineResponse2XXJobStemAssets]'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'clientId',
        'created_at': 'createdAt',
        'started_at': 'startedAt',
        'updated_at': 'updatedAt',
        'request_id': 'requestId',
        'license_id': 'licenseId',
        'stem_metadata': 'stemMetadata',
        'metadata': 'metadata',
        'callback_url': 'callbackUrl',
        'status': 'status',
        'status_info': 'statusInfo',
        'source_asset': 'sourceAsset',
        'stem_assets': 'stemAssets',
        'output_assets': 'outputAssets'
    }

    def __init__(self, id=None, client_id=None, created_at=None, started_at=None, updated_at=None, request_id=None, license_id=None, stem_metadata=None, metadata=None, callback_url=None, status=None, status_info=None, source_asset=None, stem_assets=None, output_assets=None):  # noqa: E501
        """InlineResponse2XXJob - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client_id = None
        self._created_at = None
        self._started_at = None
        self._updated_at = None
        self._request_id = None
        self._license_id = None
        self._stem_metadata = None
        self._metadata = None
        self._callback_url = None
        self._status = None
        self._status_info = None
        self._source_asset = None
        self._stem_assets = None
        self._output_assets = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if created_at is not None:
            self.created_at = created_at
        if started_at is not None:
            self.started_at = started_at
        if updated_at is not None:
            self.updated_at = updated_at
        if request_id is not None:
            self.request_id = request_id
        if license_id is not None:
            self.license_id = license_id
        if stem_metadata is not None:
            self.stem_metadata = stem_metadata
        if metadata is not None:
            self.metadata = metadata
        if callback_url is not None:
            self.callback_url = callback_url
        if status is not None:
            self.status = status
        if status_info is not None:
            self.status_info = status_info
        if source_asset is not None:
            self.source_asset = source_asset
        if stem_assets is not None:
            self.stem_assets = stem_assets
        if output_assets is not None:
            self.output_assets = output_assets

    @property
    def id(self):
        """Gets the id of this InlineResponse2XXJob.  # noqa: E501

        Unique identifier of the stem generation job  # noqa: E501

        :return: The id of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2XXJob.

        Unique identifier of the stem generation job  # noqa: E501

        :param id: The id of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this InlineResponse2XXJob.  # noqa: E501

        Identifier of the client making the request  # noqa: E501

        :return: The client_id of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this InlineResponse2XXJob.

        Identifier of the client making the request  # noqa: E501

        :param client_id: The client_id of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2XXJob.  # noqa: E501

        Timestamp of when the stem generation job was created  # noqa: E501

        :return: The created_at of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2XXJob.

        Timestamp of when the stem generation job was created  # noqa: E501

        :param created_at: The created_at of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def started_at(self):
        """Gets the started_at of this InlineResponse2XXJob.  # noqa: E501

        Timestamp of when the stem generation job was started  # noqa: E501

        :return: The started_at of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this InlineResponse2XXJob.

        Timestamp of when the stem generation job was started  # noqa: E501

        :param started_at: The started_at of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse2XXJob.  # noqa: E501

        Timestamp of when the stem generation job was last updated  # noqa: E501

        :return: The updated_at of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse2XXJob.

        Timestamp of when the stem generation job was last updated  # noqa: E501

        :param updated_at: The updated_at of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def request_id(self):
        """Gets the request_id of this InlineResponse2XXJob.  # noqa: E501

        Unique identifier of the request that generated this stem generation job  # noqa: E501

        :return: The request_id of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this InlineResponse2XXJob.

        Unique identifier of the request that generated this stem generation job  # noqa: E501

        :param request_id: The request_id of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def license_id(self):
        """Gets the license_id of this InlineResponse2XXJob.  # noqa: E501

        Identifier of the license used for stem generation  # noqa: E501

        :return: The license_id of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this InlineResponse2XXJob.

        Identifier of the license used for stem generation  # noqa: E501

        :param license_id: The license_id of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._license_id = license_id

    @property
    def stem_metadata(self):
        """Gets the stem_metadata of this InlineResponse2XXJob.  # noqa: E501


        :return: The stem_metadata of this InlineResponse2XXJob.  # noqa: E501
        :rtype: InlineResponse2XXJobStemMetadata
        """
        return self._stem_metadata

    @stem_metadata.setter
    def stem_metadata(self, stem_metadata):
        """Sets the stem_metadata of this InlineResponse2XXJob.


        :param stem_metadata: The stem_metadata of this InlineResponse2XXJob.  # noqa: E501
        :type: InlineResponse2XXJobStemMetadata
        """

        self._stem_metadata = stem_metadata

    @property
    def metadata(self):
        """Gets the metadata of this InlineResponse2XXJob.  # noqa: E501


        :return: The metadata of this InlineResponse2XXJob.  # noqa: E501
        :rtype: InlineResponse2XXJobStemMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InlineResponse2XXJob.


        :param metadata: The metadata of this InlineResponse2XXJob.  # noqa: E501
        :type: InlineResponse2XXJobStemMetadata
        """

        self._metadata = metadata

    @property
    def callback_url(self):
        """Gets the callback_url of this InlineResponse2XXJob.  # noqa: E501

        URL for the callback function to receive updates on the stem generation job  # noqa: E501

        :return: The callback_url of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this InlineResponse2XXJob.

        URL for the callback function to receive updates on the stem generation job  # noqa: E501

        :param callback_url: The callback_url of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def status(self):
        """Gets the status of this InlineResponse2XXJob.  # noqa: E501

        Current status of the stem generation job  # noqa: E501

        :return: The status of this InlineResponse2XXJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2XXJob.

        Current status of the stem generation job  # noqa: E501

        :param status: The status of this InlineResponse2XXJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_info(self):
        """Gets the status_info of this InlineResponse2XXJob.  # noqa: E501


        :return: The status_info of this InlineResponse2XXJob.  # noqa: E501
        :rtype: InlineResponse2XXJobStatusInfo
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """Sets the status_info of this InlineResponse2XXJob.


        :param status_info: The status_info of this InlineResponse2XXJob.  # noqa: E501
        :type: InlineResponse2XXJobStatusInfo
        """

        self._status_info = status_info

    @property
    def source_asset(self):
        """Gets the source_asset of this InlineResponse2XXJob.  # noqa: E501


        :return: The source_asset of this InlineResponse2XXJob.  # noqa: E501
        :rtype: InlineResponse2XXJobSourceAsset
        """
        return self._source_asset

    @source_asset.setter
    def source_asset(self, source_asset):
        """Sets the source_asset of this InlineResponse2XXJob.


        :param source_asset: The source_asset of this InlineResponse2XXJob.  # noqa: E501
        :type: InlineResponse2XXJobSourceAsset
        """

        self._source_asset = source_asset

    @property
    def stem_assets(self):
        """Gets the stem_assets of this InlineResponse2XXJob.  # noqa: E501

        Array of assets representing the generated stems  # noqa: E501

        :return: The stem_assets of this InlineResponse2XXJob.  # noqa: E501
        :rtype: list[InlineResponse2XXJobStemAssets]
        """
        return self._stem_assets

    @stem_assets.setter
    def stem_assets(self, stem_assets):
        """Sets the stem_assets of this InlineResponse2XXJob.

        Array of assets representing the generated stems  # noqa: E501

        :param stem_assets: The stem_assets of this InlineResponse2XXJob.  # noqa: E501
        :type: list[InlineResponse2XXJobStemAssets]
        """

        self._stem_assets = stem_assets

    @property
    def output_assets(self):
        """Gets the output_assets of this InlineResponse2XXJob.  # noqa: E501

        Array of assets representing the generated stems  # noqa: E501

        :return: The output_assets of this InlineResponse2XXJob.  # noqa: E501
        :rtype: list[InlineResponse2XXJobStemAssets]
        """
        return self._output_assets

    @output_assets.setter
    def output_assets(self, output_assets):
        """Sets the output_assets of this InlineResponse2XXJob.

        Array of assets representing the generated stems  # noqa: E501

        :param output_assets: The output_assets of this InlineResponse2XXJob.  # noqa: E501
        :type: list[InlineResponse2XXJobStemAssets]
        """

        self._output_assets = output_assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2XXJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2XXJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
